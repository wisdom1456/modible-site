# Modible: Content Schema & File Structure

## Overview

This document defines how content is structured, created, and managed in Modible. All content is file-based using Markdown with frontmatter (MDsveX).

**For Cursor AI:** Follow these schemas exactly when creating new content. The frontmatter structure is strict and required for proper routing and SEO.

---

## Directory Structure

```
src/
├── content/              # All markdown content
│   ├── demos/           # Interactive project demos
│   │   ├── neural-network-visualizer.md
│   │   ├── music-visualizer.md
│   │   └── code-to-diagram.md
│   ├── essays/          # Technical writing
│   │   ├── ai-cost-management.md
│   │   ├── building-in-public.md
│   │   └── retro-web-design.md
│   ├── art/             # Creative/generative projects
│   │   ├── generative-audio-viz.md
│   │   └── procedural-landscapes.md
│   └── meta/            # Special pages
│       ├── about.md
│       ├── now.md
│       └── colophon.md
├── routes/
│   ├── demos/
│   │   ├── +page.svelte          # Demos index
│   │   ├── +page.ts              # Load all demos
│   │   └── [slug]/
│   │       ├── +page.svelte      # Demo detail template
│   │       └── +page.ts          # Load specific demo
│   ├── essays/
│   │   └── [similar structure]
│   ├── art/
│   │   └── [similar structure]
│   └── log/
│       ├── +page.svelte          # Build diary
│       └── +page.ts              # Load log entries
└── lib/
    └── utils/
        ├── content.ts            # Content loading utilities
        └── markdown.ts           # Markdown processing
```

---

## Content Type Schemas

### 1. Demo (Interactive Project)

**File Location:** `src/content/demos/{slug}.md`  
**URL Pattern:** `https://modible.com/demos/{slug}`

**Frontmatter Schema:**
```yaml
---
# Required Fields
title: string                    # Display title (60 chars max)
description: string              # One-sentence description (120-160 chars)
type: 'demo'                     # Must be 'demo'
date: YYYY-MM-DD                 # Publication date (ISO 8601)
slug: string                     # URL slug (must match filename)

# Content Classification
tags: string[]                   # Categories (AI, Visualization, etc.)
technologies: string[]           # Tech stack (SvelteKit, Canvas, etc.)
featured: boolean                # Show on homepage (default: false)
draft: boolean                   # Hide from production (default: false)

# Interactive Fields
interactive: boolean             # Has live demo component
github_url?: string              # GitHub repository URL
live_url?: string                # Standalone demo URL (if external)
demo_component?: string          # Svelte component path for embedded demo

# SEO/Social
og_image?: string                # Open Graph image (1200x630px)
keywords?: string[]              # SEO keywords

# Optional Metadata
reading_time?: string            # Auto-calculated or manual
updated?: YYYY-MM-DD             # Last updated date
difficulty?: 'beginner' | 'intermediate' | 'advanced'
---
```

**Example: `neural-network-visualizer.md`**
```markdown
---
title: "Neural Network Visualizer"
description: "Watch a neural network learn to recognize handwriting in real-time through interactive visualization"
type: demo
date: 2025-01-15
slug: neural-network-visualizer

tags:
  - AI
  - Machine Learning
  - Visualization
technologies:
  - SvelteKit
  - Canvas API
  - TensorFlow.js

featured: true
draft: false
interactive: true
github_url: https://github.com/yourusername/neural-viz
demo_component: DemoNeuralViz

og_image: /images/demos/neural-viz-og.png
difficulty: intermediate
---

## What This Does

Ever wondered how neural networks actually learn? This interactive demo lets you watch the learning process in real-time.

You'll see:
- **Input layer** receiving handwritten digits
- **Hidden layers** processing patterns
- **Output layer** making predictions
- **Backpropagation** adjusting weights

No AI experience needed - just click, draw, and watch it learn!

## How to Use

1. Draw a digit (0-9) on the canvas
2. Watch the network predict what you drew
3. See how confident it is in each prediction
4. Train it on new examples to improve accuracy

## Technical Details

Built with TensorFlow.js for browser-based training. The network uses:
- 784 input neurons (28x28 pixel grid)
- 2 hidden layers (128 neurons each)
- 10 output neurons (digits 0-9)
- ReLU activation + softmax output

### Implementation Highlights

```javascript
const model = tf.sequential({
  layers: [
    tf.layers.dense({ units: 128, activation: 'relu', inputShape: [784] }),
    tf.layers.dense({ units: 128, activation: 'relu' }),
    tf.layers.dense({ units: 10, activation: 'softmax' })
  ]
});
```

## What I Learned

Building this taught me:
- How to visualize high-dimensional data
- Browser performance optimization for ML
- Making complex concepts accessible
- The power of interactive learning

## Try It Yourself

Fork the repo and experiment with:
- Different network architectures
- Custom training datasets
- Real-time prediction confidence
- Transfer learning examples
```

---

### 2. Essay (Technical Writing)

**File Location:** `src/content/essays/{slug}.md`  
**URL Pattern:** `https://modible.com/essays/{slug}`

**Frontmatter Schema:**
```yaml
---
# Required Fields
title: string
description: string
type: 'essay'
date: YYYY-MM-DD
slug: string

# Content Classification
tags: string[]
featured: boolean
draft: boolean

# Essay-Specific
reading_time: string             # "8 min read"
series?: string                  # Series name (if part of series)
series_order?: number            # Position in series

# SEO/Social
og_image?: string
keywords?: string[]

# Optional Metadata
updated?: YYYY-MM-DD
---
```

**Example: `ai-cost-management.md`**
```markdown
---
title: "Managing AI Costs: A Practical Guide"
description: "How I reduced our AI API costs by 73% without sacrificing quality"
type: essay
date: 2025-01-20
slug: ai-cost-management

tags:
  - AI
  - Cost Optimization
  - DevOps

reading_time: "12 min read"
featured: true
draft: false

og_image: /images/essays/ai-costs-og.png
keywords:
  - AI cost optimization
  - GPT-4 pricing
  - caching strategies
---

## The Problem

Our AI feature was burning through $8,000/month in API costs. We needed to cut costs without degrading the user experience.

Here's what worked...

[Essay content continues...]
```

---

### 3. Art (Creative Projects)

**File Location:** `src/content/art/{slug}.md`  
**URL Pattern:** `https://modible.com/art/{slug}`

**Frontmatter Schema:**
```yaml
---
# Required Fields
title: string
description: string
type: 'art'
date: YYYY-MM-DD
slug: string

# Content Classification
tags: string[]
featured: boolean
draft: boolean

# Art-Specific
medium: string                   # "Generative", "Interactive", "3D", etc.
interactive: boolean             # User can interact with it
tools: string[]                  # Software/libraries used

# SEO/Social
og_image?: string
preview_video?: string           # Optional video preview

# Optional Metadata
updated?: YYYY-MM-DD
inspiration?: string             # What inspired this piece
---
```

**Example: `generative-audio-viz.md`**
```markdown
---
title: "Synesthetic Soundscapes"
description: "Generative audio visualization that transforms music into flowing geometric patterns"
type: art
date: 2025-01-25
slug: synesthetic-soundscapes

tags:
  - Generative Art
  - Audio Visualization
  - WebGL

medium: "Generative Interactive"
interactive: true
tools:
  - Three.js
  - Web Audio API
  - GLSL Shaders

featured: true
draft: false

og_image: /images/art/synesthetic-og.png
preview_video: /videos/art/synesthetic-preview.mp4
inspiration: "Kandinsky's synesthesia and Ryoji Ikeda's audiovisual work"
---

## Concept

Music as visual experience. This piece translates audio frequencies into flowing geometric forms...

[Art description continues...]
```

---

## TypeScript Interfaces

```typescript
// src/lib/types/content.ts

export type ContentType = 'demo' | 'essay' | 'art';

export interface BaseFrontmatter {
  title: string;
  description: string;
  type: ContentType;
  date: string;
  slug: string;
  tags: string[];
  featured: boolean;
  draft: boolean;
  og_image?: string;
  keywords?: string[];
  updated?: string;
}

export interface DemoFrontmatter extends BaseFrontmatter {
  type: 'demo';
  technologies: string[];
  interactive: boolean;
  github_url?: string;
  live_url?: string;
  demo_component?: string;
  difficulty?: 'beginner' | 'intermediate' | 'advanced';
}

export interface EssayFrontmatter extends BaseFrontmatter {
  type: 'essay';
  reading_time: string;
  series?: string;
  series_order?: number;
}

export interface ArtFrontmatter extends BaseFrontmatter {
  type: 'art';
  medium: string;
  interactive: boolean;
  tools: string[];
  preview_video?: string;
  inspiration?: string;
}

export type Frontmatter = DemoFrontmatter | EssayFrontmatter | ArtFrontmatter;

export interface ContentItem<T extends Frontmatter = Frontmatter> {
  metadata: T;
  html: string;
  raw: string;
}
```

---

## Content Loading Utilities

```typescript
// src/lib/utils/content.ts

import { error } from '@sveltejs/kit';
import type { Frontmatter, ContentItem, ContentType } from '$lib/types/content';

/**
 * Load all content of a specific type
 */
export async function loadContent<T extends Frontmatter>(
  type: ContentType
): Promise<ContentItem<T>[]> {
  const modules = import.meta.glob('/src/content/**/*.md');
  const contentItems: ContentItem<T>[] = [];

  for (const path in modules) {
    if (!path.includes(`/content/${type}/`)) continue;

    const module = await modules[path]() as any;
    const metadata = module.metadata as T;

    // Skip drafts in production
    if (import.meta.env.PROD && metadata.draft) continue;

    contentItems.push({
      metadata,
      html: module.default.render().html,
      raw: module.default
    });
  }

  // Sort by date (newest first)
  return contentItems.sort((a, b) => 
    new Date(b.metadata.date).getTime() - new Date(a.metadata.date).getTime()
  );
}

/**
 * Load a single content item by slug
 */
export async function loadContentBySlug<T extends Frontmatter>(
  type: ContentType,
  slug: string
): Promise<ContentItem<T>> {
  try {
    const module = await import(`../../content/${type}/${slug}.md`);
    const metadata = module.metadata as T;

    // Block drafts in production
    if (import.meta.env.PROD && metadata.draft) {
      throw error(404, 'Content not found');
    }

    return {
      metadata,
      html: module.default.render().html,
      raw: module.default
    };
  } catch (e) {
    throw error(404, `Content not found: ${type}/${slug}`);
  }
}

/**
 * Get featured content across all types
 */
export async function loadFeaturedContent(): Promise<ContentItem[]> {
  const [demos, essays, art] = await Promise.all([
    loadContent('demo'),
    loadContent('essay'),
    loadContent('art')
  ]);

  const allContent = [...demos, ...essays, ...art]
    .filter(item => item.metadata.featured)
    .sort((a, b) => 
      new Date(b.metadata.date).getTime() - new Date(a.metadata.date).getTime()
    );

  return allContent.slice(0, 6); // Top 6 featured
}

/**
 * Get content by tag
 */
export async function loadContentByTag(tag: string): Promise<ContentItem[]> {
  const [demos, essays, art] = await Promise.all([
    loadContent('demo'),
    loadContent('essay'),
    loadContent('art')
  ]);

  return [...demos, ...essays, ...art]
    .filter(item => 
      item.metadata.tags
        .map(t => t.toLowerCase())
        .includes(tag.toLowerCase())
    )
    .sort((a, b) => 
      new Date(b.metadata.date).getTime() - new Date(a.metadata.date).getTime()
    );
}

/**
 * Calculate reading time from markdown content
 */
export function calculateReadingTime(markdown: string): string {
  const wordsPerMinute = 200;
  const words = markdown.trim().split(/\s+/).length;
  const minutes = Math.ceil(words / wordsPerMinute);
  return `${minutes} min read`;
}

/**
 * Extract all unique tags across content
 */
export async function getAllTags(): Promise<string[]> {
  const [demos, essays, art] = await Promise.all([
    loadContent('demo'),
    loadContent('essay'),
    loadContent('art')
  ]);

  const allTags = [...demos, ...essays, ...art]
    .flatMap(item => item.metadata.tags);

  return [...new Set(allTags)].sort();
}

/**
 * Extract all unique technologies from demos
 */
export async function getAllTechnologies(): Promise<string[]> {
  const demos = await loadContent<DemoFrontmatter>('demo');
  const allTech = demos.flatMap(item => item.metadata.technologies);
  return [...new Set(allTech)].sort();
}
```

---

## Route Implementation Patterns

### Index Page (List All Items)

```typescript
// src/routes/demos/+page.ts

import type { PageLoad } from './$types';
import { loadContent } from '$lib/utils/content';
import type { DemoFrontmatter } from '$lib/types/content';

export const load: PageLoad = async () => {
  const demos = await loadContent<DemoFrontmatter>('demo');

  return {
    demos,
    meta: {
      title: 'Interactive Demos',
      description: 'Explore interactive projects that make modern tech approachable through retro aesthetics'
    }
  };
};
```

```svelte
<!-- src/routes/demos/+page.svelte -->
<script lang="ts">
  import SEOHead from '$lib/components/seo/SEOHead.svelte';
  import Container from '$lib/components/layout/Container.svelte';
  import ContentGrid from '$lib/components/content/ContentGrid.svelte';
  import ArcadeCard from '$lib/components/content/ArcadeCard.svelte';
  
  export let data;
</script>

<SEOHead
  title={data.meta.title}
  description={data.meta.description}
  canonical="https://modible.com/demos"
  type="website"
/>

<Container>
  <header class="page-header">
    <h1 class="display-xl">Interactive Demos</h1>
    <p class="body">{data.meta.description}</p>
  </header>

  <ContentGrid columns={3}>
    {#each data.demos as demo}
      <ArcadeCard
        title={demo.metadata.title}
        description={demo.metadata.description}
        imageUrl={demo.metadata.og_image || '/images/placeholder.png'}
        href="/demos/{demo.metadata.slug}"
        tags={demo.metadata.tags}
        featured={demo.metadata.featured}
      />
    {/each}
  </ContentGrid>
</Container>
```

---

### Detail Page (Single Item)

```typescript
// src/routes/demos/[slug]/+page.ts

import type { PageLoad } from './$types';
import { loadContentBySlug, loadContent } from '$lib/utils/content';
import type { DemoFrontmatter } from '$lib/types/content';

export const load: PageLoad = async ({ params }) => {
  const content = await loadContentBySlug<DemoFrontmatter>('demo', params.slug);
  
  // Get related content (same tags)
  const allDemos = await loadContent<DemoFrontmatter>('demo');
  const related = allDemos
    .filter(item => 
      item.metadata.slug !== params.slug &&
      item.metadata.tags.some(tag => content.metadata.tags.includes(tag))
    )
    .slice(0, 3);

  return {
    content,
    related
  };
};
```

```svelte
<!-- src/routes/demos/[slug]/+page.svelte -->
<script lang="ts">
  import SEOHead from '$lib/components/seo/SEOHead.svelte';
  import Container from '$lib/components/layout/Container.svelte';
  import RetroPanel from '$lib/components/content/RetroPanel.svelte';
  import Tag from '$lib/components/ui/Tag.svelte';
  import Button from '$lib/components/ui/Button.svelte';
  import ArcadeCard from '$lib/components/content/ArcadeCard.svelte';
  import ContentGrid from '$lib/components/content/ContentGrid.svelte';
  
  export let data;
  const { content, related } = data;
  const { metadata } = content;
</script>

<SEOHead
  title={metadata.title}
  description={metadata.description}
  canonical="https://modible.com/demos/{metadata.slug}"
  ogImage={metadata.og_image}
  type="article"
  publishDate={metadata.date}
  modifiedDate={metadata.updated}
/>

<Container size="lg">
  <!-- Breadcrumb -->
  <nav class="breadcrumb" aria-label="Breadcrumb">
    <ol>
      <li><a href="/">Home</a></li>
      <li><a href="/demos">Demos</a></li>
      <li aria-current="page">{metadata.title}</li>
    </ol>
  </nav>

  <!-- Hero -->
  <header class="hero">
    <h1 class="display-xl">{metadata.title}</h1>
    <p class="lead body">{metadata.description}</p>
    
    <div class="meta">
      <time datetime={metadata.date}>
        {new Date(metadata.date).toLocaleDateString('en-US', {
          year: 'numeric',
          month: 'long',
          day: 'numeric'
        })}
      </time>
      
      {#if metadata.difficulty}
        <span class="difficulty">{metadata.difficulty}</span>
      {/if}
    </div>
    
    <div class="tags">
      {#each metadata.tags as tag}
        <Tag label={tag} />
      {/each}
    </div>
    
    <div class="actions">
      {#if metadata.github_url}
        <Button href={metadata.github_url} variant="outline">
          View Source
        </Button>
      {/if}
      {#if metadata.live_url}
        <Button href={metadata.live_url} variant="primary">
          Try Live Demo
        </Button>
      {/if}
    </div>
  </header>

  <!-- Interactive Demo (if embedded) -->
  {#if metadata.interactive && metadata.demo_component}
    <section class="demo-container">
      <!-- Dynamic component import would go here -->
      <RetroPanel title="Interactive Demo" icon="🎮">
        <p>Demo component: {metadata.demo_component}</p>
      </RetroPanel>
    </section>
  {/if}

  <!-- Content -->
  <RetroPanel title="Overview" icon="📖">
    <article class="content">
      {@html content.html}
    </article>
  </RetroPanel>

  <!-- Technologies -->
  {#if metadata.technologies.length > 0}
    <section class="technologies">
      <h2 class="heading-lg">Built With</h2>
      <div class="tech-tags">
        {#each metadata.technologies as tech}
          <Tag label={tech} href="/stack/{tech.toLowerCase()}" variant="highlight" />
        {/each}
      </div>
    </section>
  {/if}

  <!-- Related Content -->
  {#if related.length > 0}
    <section class="related">
      <h2 class="heading-lg">Related Projects</h2>
      <ContentGrid columns={3}>
        {#each related as item}
          <ArcadeCard
            title={item.metadata.title}
            description={item.metadata.description}
            imageUrl={item.metadata.og_image || '/images/placeholder.png'}
            href="/demos/{item.metadata.slug}"
            tags={item.metadata.tags.slice(0, 3)}
          />
        {/each}
      </ContentGrid>
    </section>
  {/if}
</Container>

<style>
  .breadcrumb {
    margin-bottom: var(--space-lg);
  }
  
  .breadcrumb ol {
    display: flex;
    gap: var(--space-sm);
    list-style: none;
    font-family: var(--font-label);
    font-size: 0.875rem;
    color: var(--crt-gray-300);
  }
  
  .breadcrumb li:not(:last-child)::after {
    content: '/';
    margin-left: var(--space-sm);
  }
  
  .breadcrumb a {
    color: var(--terminal-green);
    text-decoration: none;
  }
  
  .breadcrumb a:hover {
    text-decoration: underline;
  }
  
  .hero {
    margin-bottom: var(--space-xxl);
    text-align: center;
  }
  
  .hero h1 {
    margin-bottom: var(--space-md);
  }
  
  .lead {
    font-size: 1.25rem;
    color: var(--crt-gray-300);
    margin: var(--space-lg) auto;
  }
  
  .meta {
    display: flex;
    gap: var(--space-md);
    justify-content: center;
    margin: var(--space-md) 0;
    font-family: var(--font-label);
    font-size: 0.875rem;
    color: var(--crt-gray-300);
  }
  
  .tags {
    display: flex;
    gap: var(--space-sm);
    justify-content: center;
    margin: var(--space-lg) 0;
  }
  
  .actions {
    display: flex;
    gap: var(--space-md);
    justify-content: center;
    margin-top: var(--space-xl);
  }
  
  .demo-container,
  .technologies,
  .related {
    margin-top: var(--space-xxl);
  }
  
  .content {
    font-family: var(--font-interface);
    line-height: 1.7;
  }
  
  .content :global(h2) {
    font-size: 1.5rem;
    margin-top: var(--space-xl);
    margin-bottom: var(--space-md);
    color: var(--neon-purple-400);
  }
  
  .content :global(h3) {
    font-size: 1.25rem;
    margin-top: var(--space-lg);
    margin-bottom: var(--space-sm);
    color: var(--terminal-green);
  }
  
  .content :global(p) {
    margin-bottom: var(--space-md);
  }
  
  .content :global(pre) {
    background: var(--crt-black);
    padding: var(--space-lg);
    border-radius: 4px;
    overflow-x: auto;
    margin: var(--space-lg) 0;
  }
  
  .content :global(code) {
    font-family: var(--font-code);
    font-size: 0.875rem;
  }
  
  .tech-tags {
    display: flex;
    gap: var(--space-sm);
    flex-wrap: wrap;
    margin-top: var(--space-md);
  }
</style>
```

---

## Content Creation Workflow

### For Cursor AI: Creating New Content

**Step 1: Determine Content Type**
- Is it interactive? → Demo
- Is it technical writing? → Essay
- Is it creative/generative? → Art

**Step 2: Create Markdown File**
```bash
# Create file with proper naming
src/content/demos/my-new-project.md
```

**Step 3: Add Frontmatter**
```yaml
---
title: "My New Project"
description: "One sentence explaining what it does"
type: demo  # or essay, art
date: 2025-01-30
slug: my-new-project  # Must match filename

tags: [AI, Visualization]
technologies: [SvelteKit, Canvas]
featured: false
draft: true  # Set to false when ready to publish

interactive: true
github_url: https://github.com/user/project
og_image: /images/demos/my-project-og.png
---
```

**Step 4: Write Content**
Use Markdown with proper structure:
- H2 for major sections
- H3 for subsections
- Code blocks with language hints
- Images with descriptive alt text

**Step 5: Create OG Image**
- Size: 1200x630px
- Include project title
- Show key visual
- Place in `/static/images/{type}/`

**Step 6: Test Locally**
```bash
npm run dev
# Navigate to /demos/my-new-project
```

**Step 7: Publish**
- Change `draft: false`
- Commit and deploy

---

## Validation Rules

Before marking content as published (`draft: false`):

- [ ] Frontmatter includes all required fields
- [ ] Slug matches filename exactly
- [ ] Date is in YYYY-MM-DD format
- [ ] Description is 120-160 characters
- [ ] Tags are relevant and consistent with existing content
- [ ] OG image exists and is 1200x630px
- [ ] GitHub URL is valid (if provided)
- [ ] Content has proper heading structure (H2, H3, not H1)
- [ ] Code blocks have language hints
- [ ] Images have alt text
- [ ] Links are absolute for external, relative for internal
- [ ] No spelling/grammar errors

---

## Content Guidelines

### Writing Style
```javascript
const style = {
  audience: "Smart non-technical friend",
  tone: "Conversational, patient, playful",
  
  good: [
    "Watch the network learn in real-time",
    "This demo shows how...",
    "Try clicking the button"
  ],
  
  bad: [
    "Utilizing a convolutional neural network architecture",
    "The implementation leverages...",
    "Please proceed to interact with the interface"
  ]
};
```

### Technical Depth
- Start simple, layer complexity
- Explain jargon when first used
- Visual examples over text explanations
- "What" before "How"
- "Why" makes it memorable

### Structure
1. **Hook** (1-2 sentences): What is this?
2. **Value** (1 paragraph): Why should I care?
3. **Demo** (if applicable): Show, don't tell
4. **Explanation** (multiple sections): How it works
5. **Technical** (optional expansion): For curious minds
6. **Learnings** (reflection): What I discovered

---

*Last Updated: January 2025*  
*Version: 1.0*  
*For: Cursor AI Development*