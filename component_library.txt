# Modible: Component Library Reference

## Overview

This document defines every reusable component in the Modible design system. Each component includes:
- Purpose and use cases
- Props interface
- Implementation example
- Visual variants
- Accessibility requirements

**For Cursor AI:** Use these exact specifications when creating components. Do not deviate from prop interfaces or styling patterns.

---

## Component Categories

```
components/
├── layout/          # Page structure
│   ├── Header
│   ├── Footer
│   ├── StatusBar
│   └── Container
├── content/         # Content display
│   ├── ArcadeCard
│   ├── RetroPanel
│   ├── VinylNav
│   └── ContentGrid
├── effects/         # Visual effects
│   ├── Scanlines
│   ├── CRTGlow
│   └── VignetteOverlay
├── ui/              # Interactive elements
│   ├── Button
│   ├── Input
│   ├── Tag
│   └── ShareButton
└── seo/             # SEO helpers
    ├── SEOHead
    └── StructuredData
```

---

## Layout Components

### Header.svelte

**Purpose:** Global site header with navigation

**Props:**
```typescript
interface HeaderProps {
  currentPath: string; // For active state
}
```

**Implementation:**
```svelte
<script lang="ts">
  export let currentPath: string;
  
  const navItems = [
    { label: 'Demos', href: '/demos' },
    { label: 'Essays', href: '/essays' },
    { label: 'Art', href: '/art' },
    { label: 'Log', href: '/log' },
    { label: 'About', href: '/about' }
  ];
</script>

<header class="site-header">
  <a href="/" class="logo">
    <span class="logo-text">MODIBLE</span>
    <span class="logo-version">v1.0</span>
  </a>
  
  <nav class="main-nav">
    {#each navItems as item}
      <a 
        href={item.href}
        class:active={currentPath.startsWith(item.href)}
        class="nav-link"
      >
        {item.label}
      </a>
    {/each}
  </nav>
</header>

<style>
  .site-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--space-md) var(--space-lg);
    background: var(--crt-gray-900);
    border-bottom: 2px solid var(--crt-gray-700);
    position: sticky;
    top: 0;
    z-index: 100;
  }
  
  .logo {
    display: flex;
    align-items: baseline;
    gap: var(--space-sm);
    text-decoration: none;
    color: var(--neon-purple-400);
    font-family: var(--font-display);
    font-size: 1rem;
  }
  
  .logo-version {
    font-size: 0.625rem;
    color: var(--terminal-green);
  }
  
  .main-nav {
    display: flex;
    gap: var(--space-lg);
  }
  
  .nav-link {
    font-family: var(--font-interface);
    font-weight: 600;
    text-transform: uppercase;
    font-size: 0.875rem;
    letter-spacing: 0.05em;
    color: var(--crt-gray-300);
    text-decoration: none;
    transition: color var(--duration-fast) var(--ease-default);
  }
  
  .nav-link:hover {
    color: var(--terminal-green);
  }
  
  .nav-link.active {
    color: var(--neon-purple-400);
    text-shadow: 0 0 10px var(--neon-purple-400);
  }
  
  @media (max-width: 768px) {
    .site-header {
      flex-direction: column;
      gap: var(--space-md);
    }
    
    .main-nav {
      width: 100%;
      justify-content: space-around;
      gap: var(--space-sm);
    }
    
    .nav-link {
      font-size: 0.75rem;
    }
  }
</style>
```

**Accessibility:**
- Use `<nav>` semantic element
- Active state must have clear visual indicator
- Keyboard focusable with visible focus ring
- Mobile: Ensure 44px minimum tap targets

---

### StatusBar.svelte

**Purpose:** Doom HUD-inspired status display (optional feature for later)

**Props:**
```typescript
interface StatusBarProps {
  stats?: {
    projectCount?: number;
    buildStreak?: number;
    githubStars?: number;
    onlineStatus?: boolean;
  };
}
```

**Implementation:**
```svelte
<script lang="ts">
  export let stats: StatusBarProps['stats'] = {};
  
  const {
    projectCount = 0,
    buildStreak = 0,
    githubStars = 0,
    onlineStatus = true
  } = stats;
</script>

<aside class="status-bar">
  <div class="stat-group">
    <span class="stat-label">PROJECTS</span>
    <span class="stat-value">{projectCount}</span>
  </div>
  
  <div class="stat-group">
    <span class="stat-label">STREAK</span>
    <span class="stat-value">{buildStreak} days</span>
  </div>
  
  <div class="stat-group">
    <span class="stat-label">STARS</span>
    <span class="stat-value">{githubStars}</span>
  </div>
  
  <div class="stat-group">
    <span class="stat-label">STATUS</span>
    <span class="stat-value status-indicator" class:online={onlineStatus}>
      {onlineStatus ? 'ONLINE' : 'OFFLINE'}
    </span>
  </div>
</aside>

<style>
  .status-bar {
    display: flex;
    justify-content: space-around;
    background: var(--crt-gray-900);
    border: 2px solid;
    border-color: var(--crt-gray-300) var(--crt-black) var(--crt-black) var(--crt-gray-300);
    padding: var(--space-sm) var(--space-md);
    font-family: var(--font-label);
  }
  
  .stat-group {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--space-xs);
  }
  
  .stat-label {
    font-size: 0.625rem;
    color: var(--crt-gray-300);
    letter-spacing: 0.1em;
  }
  
  .stat-value {
    font-size: 0.875rem;
    color: var(--crt-white);
    font-weight: 700;
  }
  
  .status-indicator.online {
    color: var(--terminal-green);
    animation: pulse 2s ease-in-out infinite;
  }
  
  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.6; }
  }
  
  @media (max-width: 768px) {
    .status-bar {
      font-size: 0.75rem;
    }
    
    .stat-label {
      font-size: 0.5rem;
    }
  }
</style>
```

---

### Container.svelte

**Purpose:** Content width container with responsive padding

**Props:**
```typescript
interface ContainerProps {
  size?: 'sm' | 'md' | 'lg' | 'xl' | 'full';
  className?: string;
}
```

**Implementation:**
```svelte
<script lang="ts">
  export let size: 'sm' | 'md' | 'lg' | 'xl' | 'full' = 'lg';
  export let className: string = '';
  
  const maxWidths = {
    sm: '640px',
    md: '768px',
    lg: '1024px',
    xl: '1280px',
    full: '100%'
  };
</script>

<div 
  class="container {className}"
  style="--max-width: {maxWidths[size]}"
>
  <slot />
</div>

<style>
  .container {
    width: 100%;
    max-width: var(--max-width);
    margin-left: auto;
    margin-right: auto;
    padding-left: var(--space-md);
    padding-right: var(--space-md);
  }
  
  @media (min-width: 768px) {
    .container {
      padding-left: var(--space-lg);
      padding-right: var(--space-lg);
    }
  }
</style>
```

---

## Content Components

### ArcadeCard.svelte

**Purpose:** Project preview card with arcade cabinet aesthetic

**Props:**
```typescript
interface ArcadeCardProps {
  title: string;
  description: string;
  imageUrl: string;
  href: string;
  tags?: string[];
  featured?: boolean;
}
```

**Implementation:**
```svelte
<script lang="ts">
  export let title: string;
  export let description: string;
  export let imageUrl: string;
  export let href: string;
  export let tags: string[] = [];
  export let featured: boolean = false;
</script>

<article class="arcade-card" class:featured>
  <a href={href} class="card-link">
    <header class="marquee">
      <span class="marquee-text">{title}</span>
    </header>
    
    <div class="screen">
      <img 
        src={imageUrl} 
        alt="{title} preview"
        loading="lazy"
        width="400"
        height="300"
      />
      <div class="crt-overlay" />
    </div>
    
    <footer class="controls">
      <div class="tags">
        {#each tags.slice(0, 3) as tag}
          <span class="tag">{tag}</span>
        {/each}
      </div>
      
      <div class="cta">
        <span class="cta-text">INSERT COIN TO PLAY</span>
      </div>
    </footer>
  </a>
</article>

<style>
  .arcade-card {
    position: relative;
    background: var(--crt-gray-900);
    border: 3px solid var(--crt-gray-700);
    border-radius: 8px;
    overflow: hidden;
    transition: transform var(--duration-normal) var(--ease-default),
                box-shadow var(--duration-normal) var(--ease-default);
  }
  
  .arcade-card:hover {
    transform: translateY(-4px);
    box-shadow: 
      0 0 20px rgba(168, 85, 247, 0.3),
      0 10px 30px rgba(0, 0, 0, 0.5);
  }
  
  .arcade-card.featured {
    border-color: var(--neon-purple-500);
    box-shadow: 0 0 15px rgba(168, 85, 247, 0.2);
  }
  
  .card-link {
    display: block;
    text-decoration: none;
    color: inherit;
  }
  
  .marquee {
    background: linear-gradient(
      135deg,
      var(--neon-purple-700) 0%,
      var(--neon-purple-500) 100%
    );
    padding: var(--space-md);
    text-align: center;
    border-bottom: 2px solid var(--neon-purple-400);
    position: relative;
  }
  
  .marquee::before,
  .marquee::after {
    content: '◆';
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    color: var(--neon-purple-200);
    font-size: 0.75rem;
    animation: blink 1.5s ease-in-out infinite;
  }
  
  .marquee::before { left: var(--space-md); }
  .marquee::after { right: var(--space-md); }
  
  .marquee-text {
    font-family: var(--font-display);
    font-size: 0.875rem;
    color: var(--crt-white);
    text-transform: uppercase;
    letter-spacing: 0.1em;
    text-shadow: 0 0 10px var(--neon-purple-200);
  }
  
  .screen {
    position: relative;
    aspect-ratio: 4 / 3;
    background: var(--crt-black);
    overflow: hidden;
  }
  
  .screen img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  .crt-overlay {
    position: absolute;
    inset: 0;
    background: linear-gradient(
      to bottom,
      transparent 50%,
      rgba(0, 0, 0, 0.1) 51%
    );
    background-size: 100% 4px;
    pointer-events: none;
    opacity: 0;
    transition: opacity var(--duration-normal);
  }
  
  .arcade-card:hover .crt-overlay {
    opacity: 0.3;
  }
  
  .controls {
    padding: var(--space-md);
    background: var(--crt-gray-800);
    border-top: 2px solid var(--crt-gray-700);
  }
  
  .tags {
    display: flex;
    gap: var(--space-sm);
    margin-bottom: var(--space-md);
    flex-wrap: wrap;
  }
  
  .tag {
    font-family: var(--font-label);
    font-size: 0.625rem;
    padding: var(--space-xs) var(--space-sm);
    background: var(--crt-gray-700);
    color: var(--terminal-green);
    border-radius: 2px;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }
  
  .cta {
    text-align: center;
    padding: var(--space-sm);
    background: var(--crt-black);
    border: 2px solid;
    border-color: var(--crt-black) var(--crt-gray-300) var(--crt-gray-300) var(--crt-black);
  }
  
  .cta-text {
    font-family: var(--font-label);
    font-size: 0.75rem;
    color: var(--amber-warning);
    text-shadow: 0 0 5px var(--amber-warning);
    letter-spacing: 0.1em;
  }
  
  @keyframes blink {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.3; }
  }
  
  @media (max-width: 768px) {
    .marquee-text {
      font-size: 0.75rem;
    }
  }
</style>
```

**Accessibility:**
- Use `<article>` semantic element
- Image must have descriptive alt text
- Entire card is keyboard focusable
- Hover effects also apply to focus state

---

### RetroPanel.svelte

**Purpose:** Windows 95-style window for content containers

**Props:**
```typescript
interface RetroPanelProps {
  title?: string;
  icon?: string;
  statusText?: string;
  className?: string;
}
```

**Implementation:**
```svelte
<script lang="ts">
  export let title: string = '';
  export let icon: string = '';
  export let statusText: string = 'Ready';
  export let className: string = '';
</script>

<section class="retro-panel {className}">
  {#if title}
    <header class="panel-titlebar">
      <div class="titlebar-left">
        {#if icon}
          <span class="titlebar-icon">{icon}</span>
        {/if}
        <span class="titlebar-title">{title}</span>
      </div>
      
      <div class="titlebar-controls">
        <button class="window-btn" aria-label="Minimize" disabled>_</button>
        <button class="window-btn" aria-label="Maximize" disabled>□</button>
        <button class="window-btn close" aria-label="Close" disabled>×</button>
      </div>
    </header>
  {/if}
  
  <div class="panel-content">
    <slot />
  </div>
  
  {#if statusText}
    <footer class="panel-statusbar">
      <span class="status-text">{statusText}</span>
    </footer>
  {/if}
</section>

<style>
  .retro-panel {
    background: var(--crt-gray-900);
    border: 2px solid;
    border-color: 
      var(--crt-gray-300) 
      var(--crt-black) 
      var(--crt-black) 
      var(--crt-gray-300);
    box-shadow: 2px 2px 0 rgba(0, 0, 0, 0.3);
  }
  
  .panel-titlebar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--space-xs) var(--space-sm);
    background: linear-gradient(
      90deg,
      var(--neon-purple-700) 0%,
      var(--neon-purple-500) 100%
    );
    border-bottom: 2px solid var(--neon-purple-400);
  }
  
  .titlebar-left {
    display: flex;
    align-items: center;
    gap: var(--space-sm);
  }
  
  .titlebar-icon {
    font-size: 1rem;
  }
  
  .titlebar-title {
    font-family: var(--font-interface);
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--crt-white);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }
  
  .titlebar-controls {
    display: flex;
    gap: var(--space-xs);
  }
  
  .window-btn {
    width: 20px;
    height: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: var(--crt-gray-300);
    border: 1px solid;
    border-color: var(--crt-white) var(--crt-black) var(--crt-black) var(--crt-white);
    font-family: var(--font-interface);
    font-size: 0.75rem;
    font-weight: 700;
    color: var(--crt-black);
    cursor: not-allowed;
    opacity: 0.7;
  }
  
  .window-btn.close {
    background: var(--magenta-error);
    color: var(--crt-white);
  }
  
  .panel-content {
    padding: var(--space-lg);
  }
  
  .panel-statusbar {
    padding: var(--space-xs) var(--space-sm);
    background: var(--crt-gray-800);
    border-top: 2px solid;
    border-color: var(--crt-black) var(--crt-gray-300) var(--crt-gray-300) var(--crt-black);
  }
  
  .status-text {
    font-family: var(--font-label);
    font-size: 0.75rem;
    color: var(--crt-gray-300);
  }
  
  @media (max-width: 768px) {
    .panel-content {
      padding: var(--space-md);
    }
  }
</style>
```

---

### ContentGrid.svelte

**Purpose:** Responsive grid for displaying cards

**Props:**
```typescript
interface ContentGridProps {
  columns?: 1 | 2 | 3 | 4;
  gap?: 'sm' | 'md' | 'lg';
}
```

**Implementation:**
```svelte
<script lang="ts">
  export let columns: 1 | 2 | 3 | 4 = 3;
  export let gap: 'sm' | 'md' | 'lg' = 'lg';
  
  const gapSizes = {
    sm: 'var(--space-md)',
    md: 'var(--space-lg)',
    lg: 'var(--space-xl)'
  };
</script>

<div 
  class="content-grid"
  style="
    --columns: {columns};
    --gap: {gapSizes[gap]};
  "
>
  <slot />
</div>

<style>
  .content-grid {
    display: grid;
    grid-template-columns: repeat(var(--columns), 1fr);
    gap: var(--gap);
  }
  
  @media (max-width: 1024px) {
    .content-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }
  
  @media (max-width: 768px) {
    .content-grid {
      grid-template-columns: 1fr;
    }
  }
</style>
```

---

## Effect Components

### Scanlines.svelte

**Purpose:** CRT scanline effect overlay

**Props:** None (global effect)

**Implementation:**
```svelte
<div class="scanlines" aria-hidden="true" />

<style>
  .scanlines {
    position: fixed;
    inset: 0;
    pointer-events: none;
    background: linear-gradient(
      to bottom,
      transparent 50%,
      rgba(0, 0, 0, 0.1) 51%
    );
    background-size: 100% 4px;
    z-index: 9999;
    opacity: 0.3;
  }
  
  @media (max-width: 768px) {
    .scanlines {
      opacity: 0.15;
    }
  }
  
  @media (prefers-reduced-motion: reduce) {
    .scanlines {
      display: none;
    }
  }
</style>
```

---

### CRTGlow.svelte

**Purpose:** Apply glow effect to text elements

**Props:**
```typescript
interface CRTGlowProps {
  color?: 'purple' | 'green' | 'amber';
  intensity?: 'low' | 'medium' | 'high';
}
```

**Implementation:**
```svelte
<script lang="ts">
  export let color: 'purple' | 'green' | 'amber' = 'purple';
  export let intensity: 'low' | 'medium' | 'high' = 'medium';
  
  const colors = {
    purple: 'var(--neon-purple-400)',
    green: 'var(--terminal-green)',
    amber: 'var(--amber-warning)'
  };
  
  const intensities = {
    low: '0 0 5px',
    medium: '0 0 10px, 0 0 20px',
    high: '0 0 10px, 0 0 20px, 0 0 30px'
  };
</script>

<span 
  class="crt-glow"
  style="
    --glow-color: {colors[color]};
    --glow-intensity: {intensities[intensity]};
  "
>
  <slot />
</span>

<style>
  .crt-glow {
    text-shadow: var(--glow-intensity) var(--glow-color);
  }
</style>
```

---

## UI Components

### Button.svelte

**Purpose:** Retro-styled button component

**Props:**
```typescript
interface ButtonProps {
  variant?: 'primary' | 'secondary' | 'outline';
  size?: 'sm' | 'md' | 'lg';
  href?: string;
  disabled?: boolean;
  type?: 'button' | 'submit' | 'reset';
}
```

**Implementation:**
```svelte
<script lang="ts">
  export let variant: 'primary' | 'secondary' | 'outline' = 'primary';
  export let size: 'sm' | 'md' | 'lg' = 'md';
  export let href: string | undefined = undefined;
  export let disabled: boolean = false;
  export let type: 'button' | 'submit' | 'reset' = 'button';
  
  const Tag = href ? 'a' : 'button';
</script>

<svelte:element
  this={Tag}
  class="btn btn-{variant} btn-{size}"
  {href}
  {disabled}
  {type}
  on:click
>
  <slot />
</svelte:element>

<style>
  .btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: var(--space-sm);
    font-family: var(--font-interface);
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    text-decoration: none;
    border: 2px solid;
    cursor: pointer;
    transition: all var(--duration-fast) var(--ease-default);
  }
  
  .btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
  
  /* Sizes */
  .btn-sm {
    padding: var(--space-xs) var(--space-md);
    font-size: 0.75rem;
  }
  
  .btn-md {
    padding: var(--space-sm) var(--space-lg);
    font-size: 0.875rem;
  }
  
  .btn-lg {
    padding: var(--space-md) var(--space-xl);
    font-size: 1rem;
  }
  
  /* Variants */
  .btn-primary {
    background: var(--neon-purple-500);
    color: var(--crt-white);
    border-color: var(--neon-purple-400) var(--neon-purple-700) var(--neon-purple-700) var(--neon-purple-400);
    box-shadow: 0 0 10px rgba(168, 85, 247, 0.3);
  }
  
  .btn-primary:hover:not(:disabled) {
    background: var(--neon-purple-400);
    box-shadow: 0 0 20px rgba(168, 85, 247, 0.5);
    transform: translateY(-2px);
  }
  
  .btn-secondary {
    background: var(--terminal-green);
    color: var(--crt-black);
    border-color: var(--terminal-green-glow) var(--terminal-green-dim) var(--terminal-green-dim) var(--terminal-green-glow);
  }
  
  .btn-secondary:hover:not(:disabled) {
    background: var(--terminal-green-glow);
    transform: translateY(-2px);
  }
  
  .btn-outline {
    background: transparent;
    color: var(--neon-purple-400);
    border-color: var(--neon-purple-400);
  }
  
  .btn-outline:hover:not(:disabled) {
    background: var(--neon-purple-500);
    color: var(--crt-white);
  }
  
  .btn:focus-visible {
    outline: 2px solid transparent;
    box-shadow: 0 0 0 2px var(--neon-purple-400);
  }
</style>
```

---

### Tag.svelte

**Purpose:** Content category/technology tags

**Props:**
```typescript
interface TagProps {
  label: string;
  href?: string;
  variant?: 'default' | 'highlight';
}
```

**Implementation:**
```svelte
<script lang="ts">
  export let label: string;
  export let href: string | undefined = undefined;
  export let variant: 'default' | 'highlight' = 'default';
  
  const Tag = href ? 'a' : 'span';
</script>

<svelte:element
  this={Tag}
  class="tag tag-{variant}"
  {href}
>
  {label}
</svelte:element>

<style>
  .tag {
    display: inline-block;
    font-family: var(--font-label);
    font-size: 0.75rem;
    padding: var(--space-xs) var(--space-sm);
    background: var(--crt-gray-700);
    color: var(--terminal-green);
    border: 1px solid var(--crt-gray-500);
    border-radius: 2px;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    text-decoration: none;
    transition: all var(--duration-fast);
  }
  
  .tag-highlight {
    background: var(--neon-purple-700);
    color: var(--neon-purple-200);
    border-color: var(--neon-purple-500);
  }
  
  a.tag:hover {
    background: var(--terminal-green-dim);
    color: var(--crt-white);
    transform: translateY(-1px);
  }
</style>
```

---

## SEO Components

### SEOHead.svelte

**Purpose:** Consistent meta tags across all pages

**Props:**
```typescript
interface SEOHeadProps {
  title: string;
  description: string;
  canonical: string;
  ogImage?: string;
  type?: 'website' | 'article';
  publishDate?: string;
  modifiedDate?: string;
}
```

**Implementation:**
```svelte
<script lang="ts">
  export let title: string;
  export let description: string;
  export let canonical: string;
  export let ogImage: string = 'https://modible.com/og-default.png';
  export let type: 'website' | 'article' = 'website';
  export let publishDate: string | undefined = undefined;
  export let modifiedDate: string | undefined = undefined;
  
  const fullTitle = title.includes('Modible') ? title : `${title} | Modible`;
</script>

<svelte:head>
  <!-- Basic Meta -->
  <title>{fullTitle}</title>
  <meta name="description" content={description} />
  <link rel="canonical" href={canonical} />
  
  <!-- Open Graph -->
  <meta property="og:title" content={fullTitle} />
  <meta property="og:description" content={description} />
  <meta property="og:image" content={ogImage} />
  <meta property="og:type" content={type} />
  <meta property="og:url" content={canonical} />
  
  <!-- Twitter -->
  <meta name="twitter:card" content="summary_large_image" />
  <meta name="twitter:title" content={fullTitle} />
  <meta name="twitter:description" content={description} />
  <meta name="twitter:image" content={ogImage} />
  
  <!-- Article Meta (if applicable) -->
  {#if type === 'article' && publishDate}
    <meta property="article:published_time" content={publishDate} />
  {/if}
  {#if type === 'article' && modifiedDate}
    <meta property="article:modified_time" content={modifiedDate} />
  {/if}
</svelte:head>
```

**Usage:**
```svelte
<script>
  import SEOHead from '$lib/components/seo/SEOHead.svelte';
</script>

<SEOHead
  title="Neural Network Visualizer"
  description="Watch a neural network learn to recognize handwriting in real-time"
  canonical="https://modible.com/demos/neural-network-visualizer"
  ogImage="https://modible.com/images/demos/neural-viz-og.png"
  type="article"
  publishDate="2025-01-15T00:00:00Z"
/>
```

---

## Component Usage Patterns

### Page Template Pattern
```svelte
<!-- routes/demos/[slug]/+page.svelte -->
<script lang="ts">
  import SEOHead from '$lib/components/seo/SEOHead.svelte';
  import Container from '$lib/components/layout/Container.svelte';
  import RetroPanel from '$lib/components/content/RetroPanel.svelte';
  import Tag from '$lib/components/ui/Tag.svelte';
  import Button from '$lib/components/ui/Button.svelte';
  
  export let data;
</script>

<SEOHead
  title={data.title}
  description={data.description}
  canonical="https://modible.com/demos/{data.slug}"
  ogImage={data.ogImage}
  type="article"
  publishDate={data.date}
/>

<Container size="lg">
  <!-- Breadcrumb -->
  <nav class="breadcrumb">
    <a href="/">Home</a> / 
    <a href="/demos">Demos</a> / 
    <span>{data.title}</span>
  </nav>
  
  <!-- Hero -->
  <header class="hero">
    <h1 class="display-xl">{data.title}</h1>
    <p class="body">{data.description}</p>
    
    <div class="tags">
      {#each data.tags as tag}
        <Tag label={tag} href="/stack/{tag.toLowerCase()}" />
      {/each}
    </div>
    
    <div class="actions">
      {#if data.githubUrl}
        <Button href={data.githubUrl} variant="outline">
          View Source
        </Button>
      {/if}
      {#if data.liveUrl}
        <Button href={data.liveUrl} variant="primary">
          Try Live Demo
        </Button>
      {/if}
    </div>
  </header>
  
  <!-- Content -->
  <RetroPanel title="Overview" icon="📖">
    {@html data.html}
  </RetroPanel>
</Container>
```

---

## Testing Checklist for Components

When creating/modifying components, verify:

- [ ] TypeScript types are defined
- [ ] Props have default values where appropriate
- [ ] Mobile responsive (test at 375px)
- [ ] Keyboard accessible (tab navigation works)
- [ ] Focus states visible
- [ ] Color contrast meets WCAG AA (4.5:1)
- [ ] Reduced motion respected
- [ ] No console errors
- [ ] Works with/without JavaScript
- [ ] Loading states handled (if async)

---

*Last Updated: January 2025*  
*Version: 1.0*  
*For: Cursor AI Development*